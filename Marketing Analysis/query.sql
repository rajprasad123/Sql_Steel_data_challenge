SELECT * FROM sql6.marketing_campaigns;
SELECT * FROM sql6.sustainable_clothing;
SELECT * FROM sql6.transactions;

1. How many transactions were completed during each marketing campaign?
SELECT M.CAMPAIGN_ID,
       M.CAMPAIGN_NAME,
       COUNT(T.TRANSACTION_ID) AS NO_OF_TRANSACTIONS
FROM MARKETING_CAMPAIGNS AS M
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = M.PRODUCT_ID
GROUP BY 1
;
       
2. Which product had the highest sales quantity?
SELECT S.PRODUCT_NAME,
       SUM(T.QUANTITY) AS SALES_qUANTITY
FROM SUSTAINABLE_CLOTHING AS S
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = S.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC
;
 
3. What is the total revenue generated from each marketing campaign?
SELECT M.CAMPAIGN_NAME,
       ROUND(SUM(S.PRICE*T.QUANTITY)) AS TOTAL_REVENUE
FROM SUSTAINABLE_CLOTHING AS S
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = S.PRODUCT_ID
JOIN MARKETING_CAMPAIGNS AS M
ON M.PRODUCT_ID = S.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

4. What is the top-selling product category based on the total revenue generated?
SELECT S.CATEGORY,
       ROUND(SUM(S.PRICE*T.QUANTITY)) AS TOTAL_REVENUE
FROM SUSTAINABLE_CLOTHING AS S
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = S.PRODUCT_ID
JOIN MARKETING_CAMPAIGNS AS M
ON M.PRODUCT_ID = S.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

5. Which products had a higher quantity sold compared to the average quantity sold?
SELECT S.PRODUCT_NAME,
       T.QUANTITY
FROM SUSTAINABLE_CLOTHING AS S
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = S.PRODUCT_ID
WHERE T.QUANTITY > (SELECT AVG(QUANTITY) FROM TRANSACTIONS);

6. What is the average revenue generated per day during the marketing campaigns?
SELECT 
       ROUND(AVG(S.PRICE*T.QUANTITY),2) AS AVG_REVENUE
FROM SUSTAINABLE_CLOTHING AS S
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = S.PRODUCT_ID
JOIN MARKETING_CAMPAIGNS AS M
ON M.PRODUCT_ID = S.PRODUCT_ID
WHERE T.PURCHASE_DATE BETWEEN M.START_DATE AND M.END_DATE
;


7. What is the percentage contribution of each product to the total revenue?
WITH cte1 AS (
SELECT S.PRODUCT_NAME,
       (S.PRICE * T.QUANTITY) AS Total_sales
FROM SUSTAINABLE_CLOTHING AS S
JOIN TRANSACTIONS AS T
ON S.PRODUCT_ID = T.PRODUCT_ID)
, cte2 AS (
SELECT PRODUCT_NAME,
       SUM(Total_sales) AS TS, 
       (SELECT ROUND(SUM(Total_sales),2) FROM cte1) AS TT
FROM cte1
GROUP BY PRODUCT_NAME)
SELECT PRODUCT_NAME, 
       CONCAT(ROUND((1.0*TS/TT*100),2),'%') AS Percentage_contribution
FROM cte2
ORDER BY Percentage_contribution DESC;

8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns
WITH CTE1 AS (
SELECT M.CAMPAIGN_NAME AS Campaign, 
       AVG(T.QUANTITY) AS AVG_quantity_sold_during_campaigns
FROM MARKETING_CAMPAIGNS AS M
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = M.PRODUCT_ID
GROUP BY 1),
CTE2 AS (
SELECT AVG(QUANTITY) AS AVG_quantity_sold_Outside_campaigns
FROM TRANSACTIONS
)
SELECT AVG_quantity_sold_during_campaigns,
       AVG_quantity_sold_Outside_campaigns
FROM CTE1,CTE2      
;


9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns
WITH CTE1 AS (
SELECT  
       ROUND(SUM(S.PRICE*T.QUANTITY),2) AS Revenue_during_campaigns
FROM SUSTAINABLE_CLOTHING AS S
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = S.PRODUCT_ID
JOIN MARKETING_CAMPAIGNS AS M
ON M.PRODUCT_ID = S.PRODUCT_ID
WHERE T.PURCHASE_DATE BETWEEN M.START_DATE AND M.END_DATE
),
CTE2 AS (
SELECT 
       ROUND(SUM(S.PRICE*T.QUANTITY),2) AS Revenue_outside_campaigns
FROM SUSTAINABLE_CLOTHING AS S
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = S.PRODUCT_ID
)
SELECT Revenue_during_campaigns,
       Revenue_outside_campaigns
FROM CTE1,CTE2      
;

10. Rank the products by their average daily quantity sold
SELECT
  S.PRODUCT_NAME,
  AVG(T.QUANTITY) AS Avg_Sold_Qty,
  DENSE_RANK() OVER (ORDER BY AVG(T.QUANTITY) DESC) AS ranking
FROM SUSTAINABLE_CLOTHING AS S
JOIN TRANSACTIONS AS T
ON T.PRODUCT_ID = S.PRODUCT_ID
GROUP BY 1;

